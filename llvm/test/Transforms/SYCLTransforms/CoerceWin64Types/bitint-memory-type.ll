; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -passes=sycl-kernel-coerce-win64-types -S %s -enable-debugify -disable-output 2>&1 | FileCheck -check-prefix=DEBUGIFY %s
; RUN: opt -passes=sycl-kernel-coerce-win64-types -S %s | FileCheck %s

; This test checks that we fix alloca and gep instructions for i129+ types, to resolve x86 ABI vs. _BitInt(N) ABI conflicts.

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-win32-msvc-elf"

%struct = type { i320 }
; CHECK: [[STRUCT_0:%.*]] = type { [40 x i8] }

define void @foo(ptr %addr) {
; CHECK-LABEL: define void @foo(
; CHECK-SAME: ptr [[ADDR:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[X:%.*]] = alloca [40 x i8], align 8
; CHECK-NEXT:    [[Y:%.*]] = alloca i512, align 16
; CHECK-NEXT:    [[P:%.*]] = getelementptr [[STRUCT_0]], ptr [[ADDR]], i64 1
; CHECK-NEXT:    [[V:%.*]] = load i320, ptr [[P]], align 16
; CHECK-NEXT:    store i320 [[V]], ptr [[X]], align 16
; CHECK-NEXT:    [[V_Y:%.*]] = sext i320 [[V]] to i512
; CHECK-NEXT:    store i512 [[V_Y]], ptr [[Y]], align 16
; CHECK-NEXT:    ret void
;
entry:
  %x = alloca i320, align 16 ; (sizeof(_BitInt(320)) == 40) != (sizeof(i320) == 48), resolve it to [40 x i8]
  %y = alloca i512, align 16 ; (sizeof(_BitInt(512)) == 64) == (sizeof(i512) == 64), no need to fix
  %p = getelementptr %struct, ptr %addr, i64 1
  %v = load i320, ptr %p
  store i320 %v, ptr %x
  %v.y = sext i320 %v to i512
  store i512 %v.y, ptr %y
  ret void
}

; DEBUGIFY-NOT: WARNING
; DEBUGIFY: PASS
